#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
        # Loop header
        # xorq %rax,%rax          # count = 0;
        rrmovq %rdx, %r9
        iaddq $-9, %r9
        jmp Test

Loop:
        mrmovq (%rdi), %r10     # read val from src...
        rmmovq %r10, (%rsi)     # ...and store it to dst
        andq %r10, %r10         # val <= 0?
        jle P1
        iaddq $1, %rax         # count++

P1:
        mrmovq 8(%rdi), %r10     # read val from src...
        rmmovq %r10, 8(%rsi)     # ...and store it to dst
        andq %r10, %r10         # val <= 0?
        jle P2
        iaddq $1, %rax         # count++

P2:
        mrmovq 16(%rdi), %r10     # read val from src...
        rmmovq %r10, 16(%rsi)     # ...and store it to dst
        andq %r10, %r10         # val <= 0?
        jle P3
        iaddq $1, %rax         # count++

P3:
        mrmovq 24(%rdi), %r10     # read val from src...
        rmmovq %r10, 24(%rsi)     # ...and store it to dst
        andq %r10, %r10         # val <= 0?
        jle P4
        iaddq $1, %rax         # count++

P4:
        mrmovq 32(%rdi), %r10     # read val from src...
        rmmovq %r10, 32(%rsi)     # ...and store it to dst
        andq %r10, %r10         # val <= 0?
        jle P5
        iaddq $1, %rax         # count++

P5:
        mrmovq 40(%rdi), %r10     # read val from src...
        rmmovq %r10, 40(%rsi)     # ...and store it to dst
        andq %r10, %r10         # val <= 0?
        jle P6
        iaddq $1, %rax         # count++

P6:
        mrmovq 48(%rdi), %r10     # read val from src...
        rmmovq %r10, 48(%rsi)     # ...and store it to dst
        andq %r10, %r10         # val <= 0?
        jle P7
        iaddq $1, %rax         # count++

P7:
        mrmovq 56(%rdi), %r10     # read val from src...
        rmmovq %r10, 56(%rsi)     # ...and store it to dst
        andq %r10, %r10         # val <= 0?
        jle P8
        iaddq $1, %rax         # count++

P8:

        mrmovq 64(%rdi), %r10     # read val from src...
        rmmovq %r10, 64(%rsi)     # ...and store it to dst
        andq %r10, %r10         # val <= 0?
        jle P9
        iaddq $1, %rax         # count++

P9:

        mrmovq 72(%rdi), %r10     # read val from src...
        rmmovq %r10, 72(%rsi)     # ...and store it to dst
        andq %r10, %r10         # val <= 0?
        jle P10
        iaddq $1, %rax         # count++

P10:

        iaddq $80, %rdi
        iaddq $80, %rsi
        iaddq $-10, %rdx
        rrmovq %rdx, %r9
        iaddq $-9, %r9

Test:
        # andq %rdx,%rdx          # len > 0?
        jg Loop                 # if so, goto Loop:
        # jmp RTest

RStart:

        rrmovq %rdx, %r9
        iaddq $-3, %r9
        je R3
        jl L3

        rrmovq %rdx, %r9
        iaddq $-6, %r9
        jl L6
        je R6

        rrmovq %rdx, %r9
        iaddq $-8, %r9
        je R8
        jl R7
        jmp R9

L3:
        rrmovq %rdx, %r9
        iaddq $-1, %r9
        je R1
        jg R2
        jmp Done

L6:

        rrmovq %rdx, %r9
        iaddq $-5, %r9
        jl R4
        jmp R5

R9:
        mrmovq 64(%rdi), %r10
        rmmovq %r10, 64(%rsi)
        andq %r10, %r10
        jle R8
        iaddq $1, %rax
        
R8:
        mrmovq 56(%rdi), %r10
        rmmovq %r10, 56(%rsi)
        andq %r10, %r10
        jle R7
        iaddq $1, %rax

R7:
        mrmovq 48(%rdi), %r10
        rmmovq %r10, 48(%rsi)
        andq %r10, %r10
        jle R6
        iaddq $1, %rax
        
R6:
        mrmovq 40(%rdi), %r10
        rmmovq %r10, 40(%rsi)
        andq %r10, %r10
        jle R5
        iaddq $1, %rax
        
R5:
        mrmovq 32(%rdi), %r10
        rmmovq %r10, 32(%rsi)
        andq %r10, %r10
        jle R4
        iaddq $1, %rax

R4:
        mrmovq 24(%rdi), %r10
        rmmovq %r10, 24(%rsi)
        andq %r10, %r10
        jle R3
        iaddq $1, %rax

R3:
        mrmovq 16(%rdi), %r10
        rmmovq %r10, 16(%rsi)
        andq %r10, %r10
        jle R2
        iaddq $1, %rax

R2:
        mrmovq 8(%rdi), %r10
        rmmovq %r10, 8(%rsi)
        andq %r10, %r10
        jle R1
        iaddq $1, %rax

R1:
        mrmovq (%rdi), %r10
        rmmovq %r10, (%rsi)
        andq %r10, %r10
        jle Done
        iaddq $1, %rax


##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
        ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
